#n Wyam.Yaml
#n Wyam.Razor
#n Wyam.Markdown
#n Wyam.Highlight
#n Wyam.Minification
#n Wyam.Feeds

// #a **/*

using System.Text.RegularExpressions;

Settings[Keys.CleanOutputPath] = true;
Settings[Keys.Host] = "harrison314.github.io";
Settings[Keys.LinksUseHttps] = true;
Settings[Keys.LinkHideExtensions] = false;
Settings["GS.UseAbsoluteUrls"] = false;

System.Globalization.CultureInfo.DefaultThreadCurrentCulture  = System.Globalization.CultureInfo.CreateSpecificCulture("sk-SK");

// todo do samostatneho suboru
public class Typography: Wyam.Common.Modules.IModule
{
    private readonly Regex regex;

    public Typography()
    {
        this.regex = new Regex(@"(\s|^)(z|zo|bez|na|po|od|do|pri|pre|so|miesto|o|v|s|za|a|i|ani|aj|najprv|potom|ešte|ale|no|lež|jednako|alebo|buď|či|že|aby|čo|aký|ktorý|kde|keď|kým|kde|k|ku|čo|akoby|lebo|pretože|predsa)(\s+)([^\p{Cc}\p{Cf}\p{Z}]+)", RegexOptions.Compiled | RegexOptions.IgnoreCase);
    }

    public IEnumerable<IDocument> Execute(IReadOnlyList<IDocument> inputs, IExecutionContext context)
    {
       foreach(IDocument inputDocument in inputs)
       {
         string text = this.UseTypography(inputDocument.Content);
         yield return context.GetDocument(inputDocument, context.GetContentStream(text), null, true);
       }
    }

    private string UseTypography(string html)
    {
      string text = this.regex.Replace(html, "$1$2&#160;$4");
      text = text.Replace("...", "&#8230;");

      return text;
    }

    private string RemoveDiacritics(string myText)
        {
            string diacritic = "áäčďéěíĺľňóôőöŕšťúůűüýřžÁÄČĎÉĚÍĹĽŇÓÔŐÖŔŠŤÚŮŰÜÝŘŽ";
            string diacRemoved = "aacdeeillnoooorstuuuuyrzAACDEEILLNOOOORSTUUUUYRZ";
            System.Text.StringBuilder finalText = new System.Text.StringBuilder(myText.Length);
            for (int i = 0; i < myText.Length; i++)
            {
                int myPosition = diacritic.IndexOf(myText[i]);
                if (myPosition != -1)
                {
                    finalText.Append(diacRemoved[diacritic.IndexOf(diacritic[myPosition])]);
                }
                else
                {
                    finalText.Append(myText[i]);
                }
            }

            return finalText.ToString();
        }
}

Pipelines.Add("StaticContent",
CopyFiles("Static/**/*.*").To((source, dest) => { return dest.Path.FullPath.Replace("/Static", string.Empty); })
);

Pipelines.Add("Posts",
    ReadFiles("post/general/*.md", "post/aboutme/*.md", "post/development/*.md"),
    FrontMatter(Yaml()),
    Where(@doc.Get<bool>("IsPublished", true)),
    Markdown().UseConfiguration("pipetables+citations+mathematics+advanced"),
    Replace("<table>", "<table class=\"table table-bordered\">"),
    new Typography(),
    Meta("Post", @doc.Content),
    Meta("PostFile", string.Format(@"{0}.html", @doc["SourceFileBase"])),
    Merge(ReadFiles("post/postTemplate.cshtml")),
    Razor(),
    Highlight(),
    MinifyHtml(),
    WriteFiles((string)@doc["PostFile"]),
    Meta("SitemapItem", (string)@doc["PostFile"])
);

Pipelines.Add("PortfolioPosts",
    ReadFiles("post/aboutme/posts/*.md"),
    FrontMatter(Yaml()),
    Where(@doc.Get<bool>("IsPublished", true)),
    Markdown().UseConfiguration("pipetables+citations+mathematics+advanced"),
    Replace("<table>", "<table class=\"table table-bordered\">"),
    new Typography(),
    Meta("Post", @doc.Content),
    Meta("PostFile", string.Format(@"{0}.html", @doc["SourceFileBase"])),
    Merge(ReadFiles("post/postTemplate.cshtml")),
    Razor(),
    Highlight(),
    MinifyHtml(),
    WriteFiles((string)@doc["PostFile"]),
    Meta("SitemapItem", (string)@doc["PostFile"])
);

Pipelines.Add("Indexes",
    ReadFiles("{!_,}*.cshtml"),
    Razor(),
    MinifyHtml(),
    WriteFiles(".html")
);

Pipelines.Add("BuildSitemap",
    // sitemaps require absolute urls
    // in the above case, we are using relative urls, but you can also add absolute locations for SitemapItems
    // it will be checked whether an location is absolute or not
    // if it is relative, the above specified "Hostname" metadata is used to generate absolute urls
    Documents(@ctx.Documents),
    Sitemap(),
    WriteFiles((d, c) => "sitemap.xml")
);

Pipelines.Add("BuildFeeds",
    Documents("Posts"),
    OrderBy(DateTime.Parse(@doc["Published"].ToString())).Descending(),
    GenerateFeeds(),
    WriteFiles()
);