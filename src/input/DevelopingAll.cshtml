Title: Všetko o vývoji
Description: Zoznam vývojárskych tém na blogu.
---
<h1>Všetko o vývoji</h1>
<div class="row">
    <div class="col-lg-12 col-md-12 col-sm-12">
        <p>
            Na tejto stránke sa nachádza zoznnam článkov, ktoré sa týkajú programovania,
            vývoja aplikácií a architektúry softvérových systémov.
        </p>
    </div>
</div>

<div class="row">
    @{
        var index = 0;
    }

    @foreach (var gItem in ToIndex().GroupBy(t => index++ / 3))
    {
        <div class="row">
            @foreach (var item in gItem)
            {
                <div class="col-lg-4 col-md-4 col-sm-4">
                    @if (item.Items.Count() > 0)
                    {
                        <p><b>@item.Title</b></p>
                    }
                    else
                    {
                        <p>@item.Title</p>
                    }
                    <ul>
                        @foreach (var m in item.Items)
                        {
                            <li>
                                <a href="@Context.GetLink(m.Link, Model.GetBool("GS.UseAbsoluteUrls"))">@m.Menu</a>
                            </li>
                        }
                    </ul>
                </div>
            }
        </div>
    }
</div>


@functions {
    public class MenuItem
    {
        public string Title { get; set; }
        public List<MenuGeneralItem> Items { get; set; }
    }
    public class MenuGeneralItem
    {
        public string Menu { get; set; }
        public string Link { get; set; }

        public MenuGeneralItem(string menu, string link)
        {
            this.Menu = menu;
            this.Link = link;
        }
    }

    public List<MenuItem> ToIndex()
    {
        List<MenuItem> items = new List<MenuItem>();
        for (char c = 'a'; c <= 'z'; c++)
        {
            string letter = c.ToString();
            MenuItem item = new MenuItem();
            item.Title = string.Format("{0}, {1}", letter.ToUpper(), letter);

            item.Items = this.Context.Outputs.FromPipeline("BlogPipeline")
                        .Where(x => x.GetString("Published") != null)
            .Where(t => "Dev" == Convert.ToString(t.GetString("Cathegory")))
            .Where(t => RemoveDiacritics(t.GetString("Menu")).ToLower().StartsWith(letter))
            .OrderBy(t => t.GetString("Menu"), StringComparer.CurrentCultureIgnoreCase)
            .Select(t => new MenuGeneralItem(t.GetString("Menu"), t.GetString("Destination")))
            .ToList();

            items.Add(item);

        }
        return items;
    }

    public string RemoveDiacritics(string myText)
    {
        string diacritic = "áäčďéěíĺľňóôőöŕšťúůűüýřžÁÄČĎÉĚÍĹĽŇÓÔŐÖŔŠŤÚŮŰÜÝŘŽ";
        string diacRemoved = "aacdeeillnoooorstuuuuyrzAACDEEILLNOOOORSTUUUUYRZ";
        System.Text.StringBuilder finalText = new System.Text.StringBuilder(myText.Length);
        for (int i = 0; i < myText.Length; i++)
        {
            int myPosition = diacritic.IndexOf(myText[i]);
            if (myPosition != -1)
            {
                finalText.Append(diacRemoved[diacritic.IndexOf(diacritic[myPosition])]);
            }
            else
            {
                finalText.Append(myText[i]);
            }
        }

        return finalText.ToString();
    }
}
